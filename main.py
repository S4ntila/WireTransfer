#-----------------------------–ë–ò–ë–õ–ò–û–¢–ï–ö–ò---------------------------------#
import requests
import telebot
import time
import json
from telebot import types
#---------------------------------–ü–†–û–ö–°–ò----------------------------------#
#from telebot import apihelper
#apihelper.proxy = {'http':'http://127.0.0.1:3128'}
#-------------------------–ì–õ–û–ë–ê–õ–¨–ù–´–ï-–ü–ï–†–ï–ú–ï–ù–ù–´–ï---------------------------#
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

bot = telebot.TeleBot(BOT_TOKEN)

ADMIN_ID = 000000000 # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
ADMIN_ID2 = 000000000 # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

last_request_time = {}
userID_file = "users_id.json"
userID_file_review = "users_id_review.json"
reviews_file = "reviews.json"
user_reviews = {}
message_priority = []
#-------------------------–î–ê–ù–ù–´–ï-–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø----------------------------#
class UserState:
    def __init__(self):
        self.user_id = None
        self.type = None
        self.amount = None
        self.name = None
        self.iban = None
        self.bank = None
        self.username = None
user_state = UserState()

#-------------------------–°–ë–†–û–°-–î–ê–ù–ù–´–•-–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø----------------------------#
def reset_user_state():
    user_state.user_id = None
    user_state.type = None
    user_state.amount = None
    user_state.name = None
    user_state.iban = None
    user_state.bank = None
    user_state.username = None

#-------------------------–ö–£–†–°-----------------------------#
def get_eur_rub(): # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –µ–≤—Ä–æ –∫ —Ä—É–±–ª—é —Å –ø–æ–º–æ—â—å—é API –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏
    response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
    if response.status_code == 200:
        data = response.json()
        eur_rub = data["Valute"]["EUR"]["Value"]
        return float(eur_rub)
    else:
        return None
    
def get_eur_rub_rate(type): # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º—ã–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–≥–æ–≤–Ω—è–µ–º –ø–æ–¥ –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å
    if type == "–ü–æ–∫—É–ø–∫–∞":
        eur_rub_buy = round(get_eur_rub() * 1.053, 2)
        return eur_rub_buy 
    elif type == "–ü—Ä–æ–¥–∞–∂–∞":
        eur_rub_sell = round(get_eur_rub() * 0.975, 2)
        return eur_rub_sell
    else:
        return None
#-------------------------–°–ü–ê–ú-----------------------------#
def check_spam(user_id):
    current_time = time.time()
    if user_id in last_request_time:
        previous_time = last_request_time[user_id]
        delta = current_time - previous_time
        if delta >= 30:
            return True
        else:
            return False
    else:
        return True

def clean_message_history(message): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        for i in range(1, 101):
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - i)
    except:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    try:
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

def send_and_delete(message, text):
    sent_message = bot.send_message(message.chat.id, text)
    time.sleep(5)
    bot.delete_message(message.chat.id, sent_message.message_id)

def start_screen(message):
    reset_user_state() # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    delete_user_id(user_state.user_id) # –£–¥–∞–ª–µ–Ω–∏–µ user_id –∏–∑ —Ñ–∞–π–ª–∞
    bot.clear_step_handler_by_chat_id(message.chat.id) # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–û–±–º–µ–Ω', callback_data='exchange'))
    keyboard.add(types.InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instructions'), types.InlineKeyboardButton('–û—Ç–∑—ã–≤—ã', callback_data='reviews'))
    keyboard.add(types.InlineKeyboardButton('–ö—É—Ä—Å', callback_data='rate'))
 
    bot.send_message(message.chat.id, '–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –ö—É–ø–∏—Ç—å –∏–ª–∏ –ü—Ä–æ–¥–∞—Ç—å EUR –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É\n', reply_markup=keyboard)

def rate(message):
    clean_message_history(message)
    eur_rub_buy_str = get_eur_rub_rate("–ü–æ–∫—É–ø–∫–∞")
    eur_rub_sell_str = get_eur_rub_rate("–ü—Ä–æ–¥–∞–∂–∞")

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))

    if eur_rub_buy_str and eur_rub_sell_str is not None:
        bot.send_message(message.chat.id, f"üí∞ –ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\nüü¢ RUB ‚ûú EUR: <b>{eur_rub_buy_str}</b>\nüî¥ EUR ‚ûú RUB: <b>{eur_rub_sell_str}</b>", parse_mode='html', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å—É –µ–≤—Ä–æ. üò¢")

def instructions(message):
    clean_message_history(message)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
    text = "1. –ü–æ–¥–∞—ë—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É <b>¬´–û–±–º–µ–Ω¬ª</b> –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏–≤—à–∏—Å—å —Å –∫—É—Ä—Å–æ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ. \n–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n‚ñ™Ô∏è–¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)\n‚ñ™Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω –ø–µ—Ä–µ–≤–æ–¥\n‚ñ™Ô∏è–°—É–º–º–∞\n‚ñ™Ô∏è–†–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤\n\n2. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ê —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n\n3. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, <b>–≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</b>, —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–ª–∞—Ç–µ–∂—É, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ–∫.\n\n4. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –≤ –∑–∞—è–≤–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 30-60 –º–∏–Ω—É—Ç.\n\n5. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á—ë—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>—Å—Ä–∞–∑—É</b> –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω –ø—Ä–∏—Ö–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤."
    bot.send_message(message.chat.id, text, parse_mode='html' , reply_markup=keyboard)

def reviews(message):
    clean_message_history(message)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data='write'), types.InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', callback_data='read'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
    bot.send_message(message.chat.id, "–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=keyboard)

def reviews_write(message):
    if check_user_id(message.chat.id) == False:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤, —Ç–∞–∫ –∫–∞–∫ —Ç—ã –µ—â—ë –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏. üò≠")
        reviews(message)
    elif check_user_id_review(message.chat.id) == True:
        keyboard = types.InlineKeyboardMarkup()
        #keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='edit_review'),types.InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', callback_data='read'))
        keyboard.add(types.InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel'))
        
        # bot.send_message(message.chat.id, "–¢—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤?", reply_markup=keyboard)
        bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –ø–∏—Å–∞–ª –æ—Ç–∑—ã–≤!", reply_markup=keyboard)
        keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='reviews'))
    else:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ. –Ø –±—É–¥—É —Ä–∞–¥–∞ —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ. üòä")
        bot.register_next_step_handler(message, confirm_check_reviews)

def confirm_check_reviews(message):
    text = message.text
    user_id = message.chat.id
    if user_id not in user_reviews:
        user_reviews[user_id] = []
    user_reviews[user_id] = [f"‚úÖ @{message.from_user.username}: {text}\n"] #{user_state.name}
    save_reviews()
    bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ–π –æ—Ç–∑—ã–≤: {text}")

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(#types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', callback_data='read'), 
                 types.InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel'))
    bot.send_message(message.chat.id, "–¢–≤–æ–π –æ—Ç–∑—ã–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç! üôè\n–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —Å —Ç–æ–±–æ–π –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –≤–µ—Å—Ç–∏ –¥–µ–ª–∞! üòä\n", reply_markup=keyboard)
    save_user_id_review(message.chat.id)
    #bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    #bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

def reviews_read(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data='write'), types.InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel'))
    user_reviews = load_reviews()
    if user_reviews:
        reviews_text = ""
        for user_id, reviews in user_reviews.items():
            for review in reviews:
                reviews_text += f"{review}\n"
        bot.send_message(message.chat.id, f"–í–æ—Ç —á—Ç–æ –ø–∏—à—É—Ç –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n{reviews_text}", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ. üò¢\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ /reviews.", reply_markup=keyboard)
    
def exchange_type(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ü–æ–∫—É–ø–∫–∞', callback_data='–ü–æ–∫—É–ø–∫–∞'), types.InlineKeyboardButton('–ü—Ä–æ–¥–∞–∂–∞', callback_data='–ü—Ä–æ–¥–∞–∂–∞'))
    keyboard.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'))
    #bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —Ç–∏–ø –æ–±–º–µ–Ω–∞ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)
    bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –µ–≤—Ä–æ?', reply_markup=keyboard)

def bank_choice(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–°–±–µ—Ä–±–∞–Ω–∫', callback_data='–°–±–µ—Ä–±–∞–Ω–∫'), types.InlineKeyboardButton('–¢–∏–Ω—å–∫–æ—Ñ—Ñ', callback_data='–¢–∏–Ω—å–∫–æ—Ñ—Ñ'), types.InlineKeyboardButton('–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω', callback_data='–†–∞–π—Ñ—Ñ–∞–∑–µ–Ω'))
    keyboard.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'))
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω –ø–µ—Ä–µ–≤–æ–¥:', reply_markup=keyboard)

def amount_input(message):
    clean_message_history(message)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'))
    if user_state.type == '–ü–æ–∫—É–ø–∫–∞':
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–±–º–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 10000):', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–±–º–µ–Ω–∞ –≤ –µ–≤—Ä–æ (–º–∏–Ω–∏–º—É–º 100):', reply_markup=keyboard)
    bot.register_next_step_handler(message, amount_check)

def amount_check(message):
    try:
        amount = int(message.text)
        if user_state.type == '–ü–æ–∫—É–ø–∫–∞':
            if amount >= 10000:
                user_state.amount = amount
                iban_input(message)
            else:
                bot.send_message(message.chat.id, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 10000 —Ä—É–±–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
                amount_input(message)
        else:
            if amount >= 100:
                user_state.amount = amount
                iban_input(message)
            else:
                bot.send_message(message.chat.id, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 100 –µ–≤—Ä–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
                amount_input(message)
    except:
        if message.text == '–û—Ç–º–µ–Ω–∞':
            start_screen(message)
        else:
            bot.send_message(message.chat.id, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
            amount_input(message)
    #bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    #bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

def iban_input(message):
    clean_message_history(message)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'))    
    #bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à IBAN. –≠—Ç–æ 20-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–≤–æ–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: RU12345678901234567890', reply_markup=keyboard)
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à IBAN:', reply_markup=keyboard)
    bot.register_next_step_handler(message, iban_check)

def iban_check(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        start_screen(message)
    else:
        user_state.iban = message.text
        name_input(message)

def name_input(message):
    clean_message_history(message)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'))
    bot.send_message(message.chat.id, '–í–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ª–∞—Ç–∏–Ω–∏—Ü–µ–π:', reply_markup=keyboard)
    bot.register_next_step_handler(message, name_check)

def name_check(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        start_screen(message)
    else:
        user_state.name = message.text
        confirm_screen(message)

def confirm_exit(message):
    clean_message_history(message)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel'))
    bot.send_message(message.chat.id, f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ üìû", reply_markup=keyboard)

    if user_state.type == "–ü–æ–∫—É–ø–∫–∞":
        bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_state.username}:\n\n–¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: {user_state.type}\n–ë–∞–Ω–∫: {user_state.bank}\n–°—É–º–º–∞ –æ–±–º–µ–Ω–∞: {user_state.amount} RUB\nIBAN: {user_state.iban}\n–ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {user_state.name}\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±–º–µ–Ω–∞.")
    else:
        bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_state.username}:\n\n–¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: {user_state.type}\n–ë–∞–Ω–∫: {user_state.bank}\n–°—É–º–º–∞ –æ–±–º–µ–Ω–∞: {user_state.amount} EUR\nIBAN: {user_state.iban}\n–ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {user_state.name}\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±–º–µ–Ω–∞.")
    save_user_id(user_state.user_id)
    #start_screen(message)

def confirm_screen(message):
    user_state.username = message.from_user.username
    user_state.user_id = message.chat.id

    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm'), types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'))

    if user_state.type == "–ü–æ–∫—É–ø–∫–∞":
        bot.send_message(message.chat.id, f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: <b>{user_state.type}</b>\n–í–∞—à –±–∞–Ω–∫: <b>{user_state.bank}</b>\n–°—É–º–º–∞: <b>{user_state.amount} —Ä—É–±.</b>\nIBAN: <b>{user_state.iban}</b>\n–ò–º—è –∏ –§–∞–º–∏–ª–∏—è: <b>{user_state.name}</b>',
                        parse_mode='html', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: <b>{user_state.type}</b>\n–í–∞—à –±–∞–Ω–∫: <b>{user_state.bank}</b>\n–°—É–º–º–∞: <b>{user_state.amount} –µ–≤—Ä–æ</b>\nIBAN: <b>{user_state.iban}</b>\n–ò–º—è –∏ –§–∞–º–∏–ª–∏—è: <b>{user_state.name}</b>',
                        parse_mode='html', reply_markup=keyboard)

@bot.message_handler(commands=['start'])
def start_command(message):
    start_screen(message)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    data = call.data
    if data == 'exchange':
        #if check_spam(user_state.user_id):
        #    last_request_time[user_state.user_id] = time.time()
        #    exchange_type(call.message)
        #else:
        #    bot.send_message(call.message.chat.id, "–¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –∑–∞—è–≤–∫–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! üò°\n–ü–æ–¥–æ–∂–¥–∏ –¥–≤–µ –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–æ–π.")
        #    start_screen(call.message)  
        last_request_time[user_state.user_id] = time.time()
        exchange_type(call.message)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif data == 'rate':
        rate(call.message)

    elif data == 'instructions':
        instructions(call.message)

    elif data == '–ü–æ–∫—É–ø–∫–∞' or data == '–ü—Ä–æ–¥–∞–∂–∞':
        user_state.type = data
        bank_choice(call.message)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif data == '–¢–∏–Ω—å–∫–æ—Ñ—Ñ' or data == '–°–±–µ—Ä–±–∞–Ω–∫' or data == '–†–∞–π—Ñ—Ñ–∞–∑–µ–Ω':
        user_state.bank = data
        amount_input(call.message)

    elif data == 'confirm':
        confirm_exit(call.message)
    ###########################
    elif data == 'cancel_exchange':
        bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_state.username} –æ—Ç–º–µ–Ω–∏–ª —Å–≤–æ—é –∑–∞—è–≤–∫—É!")
        bot.send_message(call.message.chat.id, f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã! üò¢")
        delete_user_id(user_state.user_id)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    ###########################
    elif data == 'reviews':
        reviews(call.message)
    elif data == 'write':
        reviews_write(call.message)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif data == 'read':
        reviews_read(call.message)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif data == 'edit_review':
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ. –Ø –±—É–¥—É —Ä–∞–¥–∞ —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ. üòä")
        bot.register_next_step_handler(call.message, confirm_check_reviews)

    elif data == 'cancel':
        #bot.send_message(call.message, 'üïê–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...')
        start_screen(call.message)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
#------------------------------------------–û–¢–ó–´–í–´-------------------------------# 
def save_reviews():
    with open(reviews_file, mode="w") as file:
        json.dump(user_reviews, file)
        
def load_reviews():
    try:
        with open(reviews_file, mode="r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        return {}
#----------------------–°–û–•–†–ê–ù–ï–ù–ò–Ø-–ò-–£–î–ê–õ–ï–ù–ò–ï-–ú–ï–¢–†–ò–ö–ò------------------------------#
def save_user_id(user_id):
    try:
        with open(userID_file, 'w') as file:
            data = {'user_id': user_id}
            json.dump(data, file)
        print(f'User ID {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {userID_file}')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ User ID: {e}')
def delete_user_id(user_id):
    try:
        with open(userID_file, 'r') as file:
            data = json.load(file)
            user_id = data['user_id']
        with open(userID_file, 'w') as file:
            data = {}
            json.dump(data, file)
        print(f'User ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ {userID_file}')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ User ID: {e}')

def save_user_id_review(user_id):
    try:
        with open(userID_file_review, 'w') as file:
            data = {'user_id': user_id}
            json.dump(data, file)
        print(f'User ID {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {userID_file_review}')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ User ID: {e}')

def check_user_id(user_id):
    try:
        with open(userID_file, 'r') as file:
            data = json.load(file)
            if 'user_id' in data and data['user_id'] == user_id:
                return True
            else:
                return False
    except FileNotFoundError:
        print(f'–§–∞–π–ª {userID_file} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return False
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ User ID: {e}')
        return False

def check_user_id_review(user_id):
    try:
        with open(userID_file_review, 'r') as file:
            data = json.load(file)
            if 'user_id' in data and data['user_id'] == user_id:
                return True
            else:
                return False
    except FileNotFoundError:
        print(f'–§–∞–π–ª {userID_file_review} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return False
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ User ID: {e}')
        return False
# -------------------------–ó–ê–ü–£–°–ö----------------------------
bot.polling()
# -----------------------------------------------------------
# –¢–µ–ª–µ–≥—Ä–∞–º–º –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –†—É–±–ª—ë–º –∏ –ï–≤—Ä–æ
# version 2.3
# -----------------------------------------------------------